<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>InertialBody</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup instance variables

event_inherited();

mass = 1;

gravForce = 0;

gravTheta = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle gravitational effects

// Initialize list of gravity centers
var effectiveGravCenters = undefined;

// Cycle through GravityCenters, identify centers whose SoI we are in
for (var i = 0; i &lt; instance_number(GravityCenter); i++) {
    // Get reference to GravityCenter instance
    var gravCenter = instance_find(GravityCenter, i);
    
    // Check to see if we are within SoI
    if point_distance(x,y,gravCenter.x,gravCenter.y) &lt;= gravCenter.sphereOfInfluence {
        // If so, save reference for later use
        // Check if effectiveGravCenters has been defined yet
        if is_undefined(effectiveGravCenters) {
            // If so, define and save in [0]
            effectiveGravCenters[0] = gravCenter;
        } else {
            // Else save in next slot
            effectiveGravCenters[array_length_1d(effectiveGravCenters)] = gravCenter;
        }
    }
}

// Initialize mainGravCenter as object calculations will be performed with
var mainGravCenter = effectiveGravCenters[0];

// Cycle through effective grav centers for smallest distance
for (var i = 1; i &lt; array_length_1d(effectiveGravCenters); i++) {
    
    // If this grav center is closer than the stored one...
    if (point_distance(x,y,effectiveGravCenters[i].x,effectiveGravCenters[i].y)
            &gt; point_distance(x,y,mainGravCenter.x,mainGravCenter.y)) {
        
        // ...replace stored gravCenter with this one
        mainGravCenter = effectiveGravCenters[i];
    }
}

// Perform gravity calculations and store data from this run for use in
//  enemy targeting routines which will occur in the main Step event
var distance = calcDistance(self,mainGravCenter);
var acceleration = G * mainGravCenter.mass / sqr(distance);

var theta = point_direction(x,y,mainGravCenter.x,mainGravCenter.y);

accelerate(self, acceleration, theta);

gravForce = acceleration;
gravTheta = theta;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
